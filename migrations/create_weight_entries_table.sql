-- Create weight_entries table
CREATE TABLE IF NOT EXISTS public.weight_entries (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  member_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  weight DECIMAL(5, 2) NOT NULL,
  recorded_at TIMESTAMPTZ DEFAULT NOW(),
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- Ensure one weight entry per user per day
  CONSTRAINT unique_member_date UNIQUE (member_id, DATE(recorded_at))
);

-- Enable RLS
ALTER TABLE public.weight_entries ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
CREATE POLICY "Users can view their own weight entries" 
ON public.weight_entries 
FOR SELECT 
TO authenticated 
USING (auth.uid() = member_id);

CREATE POLICY "Users can insert their own weight entries"
ON public.weight_entries
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = member_id);

CREATE POLICY "Users can update their own weight entries"
ON public.weight_entries
FOR UPDATE
TO authenticated
USING (auth.uid() = member_id);

-- Create index for faster lookups
CREATE INDEX idx_weight_entries_member_id ON public.weight_entries (member_id);
CREATE INDEX idx_weight_entries_recorded_at ON public.weight_entries (recorded_at);

-- Add comment for the table
COMMENT ON TABLE public.weight_entries IS 'Stores weight tracking data for members';

-- Add trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;   
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_weight_entries_updated_at
BEFORE UPDATE ON public.weight_entries
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();
